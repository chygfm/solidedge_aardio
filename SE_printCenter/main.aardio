import win.ui;
/*DSG{{*/
var winform = win.form(text="Printing Center";right=449;bottom=305;border="thin";max=false;min=false;topmost=1)
winform.add(
button={cls="button";text="Print Active";left=260;top=94;right=376;bottom=139;tabstop=1;z=3};
button2={cls="button";text="Print All";left=260;top=164;right=373;bottom=205;tabstop=1;z=4};
groupbox={cls="groupbox";text="Actions";left=71;top=23;right=400;bottom=242;edge=1;z=1};
listbox={cls="listbox";left=102;top=94;right=235;bottom=206;border=1;cp=1;font=LOGFONT(h=-16;name='微软雅黑');items={"pdf";"dwg";"dxf";"stp"};z=2};
outpath={cls="static";text="d:\workspaces";left=79;top=211;right=393;bottom=236;center=1;color=8421504;notify=1;transparent=1;z=8};
progress={cls="progress";left=1;top=279;right=450;bottom=306;aw=1;color=32768;db=1;dl=1;dr=1;edge=1;max=100;min=0;z=13};
radCloseNothing={cls="radiobutton";text="Keep Open";left=87;top=249;right=173;bottom=269;checked=1;group=1;z=9};
radCloseSaved={cls="radiobutton";text="Save && Close";left=311;top=249;right=407;bottom=271;z=11};
radCloseWOsave={cls="radiobutton";text="Close Ruthlessly";left=185;top=249;right=292;bottom=271;z=10};
radNameRule0={cls="radiobutton";text="图纸文件名";left=84;top=45;right=167;bottom=65;group=1;z=5};
radNameRule1={cls="radiobutton";text="+版本";left=200;top=45;right=283;bottom=65;z=6};
radNameRule2={cls="radiobutton";text="+版本+名称";left=306;top=45;right=389;bottom=65;z=7};
static={cls="static";text="CLOSE? ";left=21;top=249;right=94;bottom=265;color=255;transparent=1;z=12}
)
/*}}*/
import console;
import process;
import key;
import string;
import seconn;
import SolidEdgeConstants;
import SolidEdgeDraft;
import VBASettingIO;


_ctrl = key.getState(key.VK.CTRL)
_shift =  key.getState(key.VK.SHIFT)


var toFolder = VBASettingIO.GetSetting("Domisoft", "Config", "SE_Output", "d:\workspaces");
var nameRule = tonumber(VBASettingIO.GetSetting("Domisoft", "Config", "pdfNameRule", 0))

/*formatWindowsFileName{{*/
var  formatWindowsFileName = function (nameStr) {

    //替换Windows文件名非法字符为全角＼／，．＜＞｜＊
    nameStr = string.replace(nameStr, "\\", "＼")
    nameStr = string.replace(nameStr, "/", "／")
    nameStr = string.replace(nameStr, "\:", "：")
    nameStr = string.replace(nameStr, "*", "x")
    nameStr = string.replace(nameStr, "?", "？")
    nameStr = string.replace(nameStr, '"', "“")   //替换双引号
    nameStr = string.replace(nameStr, "\<", "＜")
    nameStr = string.replace(nameStr, "\>", "＞")
    nameStr = string.replace(nameStr, "|", "｜")
    nameStr = string.replace(nameStr, "\r\n", " ")  //替换回车符
    return string.trim(nameStr)
}
/*}}*/
var startPrint=function(activeOnly, fileExt){

	var seApp = seconn.seApp;
	var Docs=seApp.Documents;

	fileExt := "pdf"
	if (!string.startWith(".",fileExt)) fileExt="." ++ fileExt
	if (fileExt==".pdf"){
    	//打印所有页
    	seApp.SetGlobalParameter (SolidEdgeConstants.ApplicationGlobalConstants.seApplicationGlobalDraftSaveAsPDFSheetOptions, SolidEdgeConstants.DraftSaveAsPDFSheetOptionsConstants.seDraftSaveAsPDFSheetOptionsConstantsAllSheets)
    	//允许每页不同大小
    	seApp.SetGlobalParameter (SolidEdgeConstants.ApplicationGlobalConstants.seApplicationGlobalDraftSaveAsPDFUseIndividualSheetSizes, true)
    	//使用彩色
    	seApp.SetGlobalParameter (SolidEdgeConstants.ApplicationGlobalConstants.seApplicationGlobalDraftSaveAsPDFSaveAllColorsBlack, false)
	}
	seApp.Application.DisplayAlerts = false;
	var totalDoc = activeOnly ? 1: Docs.Count;
	winform.progress.min=0
	winform.progress.pos=0
	winform.progress.max=totalDoc
	for (j = totalDoc; 1 ; -1){
		
    	var qhc_ver="" ,name_cn=""
    	var seDoc,seDFT,seBlk
    	var tRule;
    	seDoc = activeOnly ? seApp.ActiveDocument : Docs.Item(j) //如果指定了onlyActive参数, 则仅打印当前文档
    	if (seDoc.Type == SolidEdgeConstants.DocumentTypeConstants.igDraftDocument) {    //仅处理DFT格式
        	seDFT = seDoc
        	if (nameRule > 0) {   //用户规则为0时不检查titleblock

				seBlk = SolidEdgeDraft.getTitleBlock(seDFT.ActiveSheet);
        	}
        	if (seBlk) {
        		var t=SolidEdgeDraft.getLabelTable(seBlk)
        		name_cn = t["零件名称"] 
        		qhc_ver = t["版本"]

				qhc_ver := SolidEdgeDraft.getVerFromShtCorner(seDFT.ActiveSheet) //考虑到有些图纸里版本是写在右下角文本框里的, 不在Titleblock里, 则尝试读取右下角是否有文本框
				qhc_ver := SolidEdgeDraft.getVerFromBlkCorner(seBlk) //考虑到有些图纸里版本是写在Titleblock定义里, 则尝试读取Titleblock定义右下角是否有文本框

            	if (string.len(qhc_ver) == 0) {
               		tRule=0	//如果无法获取版本号
            	}else{
            		if (string.len(name_cn) == 0 && nameRule == 2) {
                		tRule = 1   //如果名称为空时使用规则1
            		} else {
                		tRule = nameRule    //使用用户设定的规则
            		}
            	}
        	}else{
            	tRule = 0   //如果无法获取titleblock, 使用规则0
        	}

        	select  (tRule)    {//命名规则
            	case 0 {
                	fname = toFolder ++ "\" ++ string.split(seDFT.Name, ".")[1] ++ fileExt
            	}
            	case 1 {
                	fname = toFolder ++ "\" ++ string.split(seDFT.Name, ".")[1] ++ "-" ++ qhc_ver ++ "版" ++ fileExt
            	}
            	case 2 {
                	name_cn = formatWindowsFileName(name_cn)
                	fname = toFolder ++ "\" ++ string.split(seDFT.Name, ".")[1] ++ "-" ++ qhc_ver ++ "版" ++ "-" ++ name_cn ++ fileExt
            	}
        	}
        	seDFT.Activate() //如果不Activate,只会重复保存当前文件
        	try{
        		select (fileExt){
        			case ".dwg",".pdf"{        		
        				seDFT.SaveCopyAs(fname)  //savecopyas 和 saveas 效果一样
        			}
        			case ".stp"{
        				seDFT.ModelLinks.item(1).ModelDocument.SaveCopyAs(fname)
        			} 
        			case ".dxf"{        				
        				var smDoc=seDFT.ModelLinks.item(1).ModelDocument;
        				import web.script;
        				var vm=web.script("VBScript")
        				vm.external ={
        					smDoc = function(){return smDoc}; 
        					fname = function(){return fname}        					
        				}
        				vm.addCode("Call external.smDoc.Models.SaveAsFlatDXFEx(external.fname,Nothing,Nothing,Nothing,True)")
        			} 
        		}
        	}
        	catch(e){
				console.log(e)
				console.pause(false)
        	}
			winform.progress.pos=totalDoc - j + 1
			
        	if (winform.radCloseNothing.checked!==1) seDFT.close((winform.radCloseSaved.checked==1))
        	//console.log(fname)

    	}
	}
	
	seApp.Application.DisplayAlerts = true	
	
	if (activeOnly) {
		if (fileExt==".pdf") process.execute(fname)	//如果onlyActive则打开结果文件
		winform.close();
	} else { 
    	seApp.StatusBar = "Print Done"
	}
}

winform.button.oncommand = function(id,event){
	startPrint(true, winform.listbox.selText)
	winform.close();
}

winform.button2.oncommand = function(id,event){
	startPrint(false, winform.listbox.selText)
	winform.close();
}

/*closeOnEscPress{{*/
winform.isDialogMessage = function(hwnd,msg){ 
	if( msg.message == 0x100/*_WM_KEYDOWN*/){
		
/**
		if(  msg.wParam == 0xD/*_VK_RETURN*/ ){ 
			//return true;//告诉消息处理函数这是一个快捷键,阻止按键消息继续分发
		}
**/
		
		if( msg.wParam == 0x1B/*_VK_ESC*/ ){	//按Esc退出窗口
			winform.close();
			//return true;//告诉消息处理函数这是一个快捷键,阻止按键消息继续分发
		} 
	}
	
	//检测并响应默认快捷键
	return win.isDialogMessage(hwnd,msg);
}
/*}}*/
if (_ctrl) {
	startPrint(true, "pdf")
	return ; 
}
if (_ctrl && _shift) {
	startPrint(false, "pdf")
	return ; 
}
winform.show();	
/*控件初始值{{*/
winform.listbox.selIndex=1
select(nameRule) {
	case 0 {
		winform.radNameRule0.checked = 1;
	}
	case 1 {
		winform.radNameRule1.checked = 1;
	}
	case 2 {
		winform.radNameRule2.checked = 1;
	}
}
winform.outpath.text=toFolder
/*}}*/
win.loopMessage();
return winform;